AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: '(Cloudfront-as-default-03) Simple CloudFront distribution with an S3 origin'


Parameters:
  S3BucketName:
    Type: String
  #  Default: hdfclife-bitly-prod-ui
    Description: Name of existing S3 bucket
  CertificateManagerCertificate:
    Type: String
    Description: Name of existing S3 bucket
  DomainName:
    Description: Domain name of website
    Type: String
    Default: k-pp.hdfclife.com 
  ELBId: 
    Type: String 
  ELBDNSName: 
    Type: String           


  OAIEnabled:
    Type: String
    Default: "yes"
    AllowedValues: ["yes", "no"]
    Description: Enable OAI (Access to bucket only through CloudFront)

Conditions:
  WithOAIEnabled: !Equals [!Ref "OAIEnabled", "yes"]
  WithOutOAIEnabled: !Equals [!Ref "OAIEnabled", "no"]

Resources:
  S3BucketPolicyWithAOI:
    Metadata:
      Comment: 'Bucket policy to allow cloudfront to access the data'
    Properties:
      Bucket: !Ref S3BucketName
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Principal:
              CanonicalUser: !GetAtt CfOriginAccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketName}/*'
    Type: 'AWS::S3::BucketPolicy'
    Condition: WithOAIEnabled

  CfDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: WithOutOAIEnabled
    Metadata:
      Comment: 'A simple CloudFront distribution with an S3 origin'
    Properties:
      DistributionConfig:
        Comment: 'A simple distribution with an S3 origin'
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'
            - 'OPTIONS'
          CachedMethods:
            - 'HEAD'
            - 'GET'
          Compress: false
          DefaultTTL: 0
          ForwardedValues:
            Cookies:
              Forward: 'none'
            Headers:
              - 'Origin'
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub 's3-origin-${S3BucketName}' # '${ELBDNS}'
          ViewerProtocolPolicy: 'allow-all'
        DefaultRootObject: 'index.html' 
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 200
            ResponsePagePath: 'index.html'
          - ErrorCode: 404 # not found
            ResponseCode: 200
            ResponsePagePath: 'index.html'  
        Enabled: true
        HttpVersion: 'http1.1'
        IPV6Enabled: false
        Origins:
          - DomainName: !Sub '${S3BucketName}.s3.amazonaws.com'
            Id: !Sub 's3-origin-${S3BucketName}'
            S3OriginConfig: {}
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateManagerCertificate
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only


  CfDistributionWithAOI:
    Type: "AWS::CloudFront::Distribution"
    Condition: WithOAIEnabled
    Metadata:
      Comment: 'A simple CloudFront distribution with an S3 origin'
    Properties:
      DistributionConfig:
        CacheBehaviors:
          - AllowedMethods:   
              - 'HEAD'
              - 'GET'          
              - 'DELETE'
              - 'OPTIONS'
              - 'PATCH'
              - 'POST'
              - 'PUT' 
            CachedMethods:
              - 'HEAD'
              - 'GET'
              - 'OPTIONS'  
            Compress: false
            DefaultTTL: 0
            ForwardedValues:
              Cookies:
                Forward: 'none'
              Headers:
                - 'Origin'
                - 'Access-Control-Request-Headers'
                - 'Access-Control-Request-Method' 
                - 'Host' 
              QueryString: false  
            MaxTTL: 0
            MinTTL: 0  
            PathPattern: "/lambda/*"
            TargetOriginId: !Sub "ELB-${ELBId}"
            ViewerProtocolPolicy: 'allow-all'                                                     
        Comment: 'A simple distribution with an S3 origin'
        DefaultCacheBehavior:
          AllowedMethods:
            - 'HEAD'
            - 'GET'          
            - 'DELETE'
            - 'OPTIONS'
            - 'PATCH'
            - 'POST'
            - 'PUT'
          CachedMethods:
            - 'HEAD'
            - 'GET'
            - 'OPTIONS'
          Compress: false
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: 'none'
            Headers:
              - 'Origin'
              - 'Access-Control-Request-Headers'
              - 'Access-Control-Request-Method'
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 86400
          TargetOriginId: !Sub 's3-origin-${S3BucketName}'
          ViewerProtocolPolicy: 'allow-all'
        DefaultRootObject: 'index.html'
        Aliases: 
          - 'k-pp.hdfclife.com'
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCode: 404 # not found
            ResponseCode: 200
            ResponsePagePath: '/index.html'  
        Enabled: true
        HttpVersion: 'http1.1'
        IPV6Enabled: false
        Origins:
        #---elb origin
          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 60
              OriginProtocolPolicy: "match-viewer"
              OriginReadTimeout: 60
    #          OriginSSLProtocols: TLSv1
            DomainName: !Sub '${ELBDNSName}'
            Id: !Sub "ELB-${ELBId}"
           #----s3 origin  
          - DomainName: !Sub '${S3BucketName}.s3.amazonaws.com'
            Id: !Sub 's3-origin-${S3BucketName}'
            OriginPath: ''
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CfOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateManagerCertificate
          MinimumProtocolVersion: SSLv3
          SslSupportMethod: sni-only


  CfOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Condition: WithOAIEnabled
    Metadata:
      Comment: 'Access S3 bucket content only through CloudFront'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Access S3 bucket content only through CloudFront'

Outputs:
  S3BucketName:
    Description: 'Bucket name'
    Value: !Ref S3BucketName
  CfDistributionWithOAI:
    Description: 'Id for our cloudfront distribution'
    Value: !Ref CfDistributionWithAOI
    Condition: WithOAIEnabled
  CfDistributionId:
    Description: 'Id for our cloudfront distribution'
    Value: !Ref CfDistribution
    Condition: WithOutOAIEnabled
  CfDistributionDomainNameWithOAI:
    Description: 'Domain name for our cloudfront distribution'
    Value: !GetAtt CfDistributionWithAOI.DomainName
    Condition: WithOAIEnabled
  CfDistributionDomainName:
    Description: 'Domain name for our cloudfront distribution'
    Value: !GetAtt CfDistribution.DomainName
    Condition: WithOutOAIEnabled
